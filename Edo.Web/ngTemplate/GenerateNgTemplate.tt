<#@ template language="C#" debug="True" #>
<#@ output extension="log" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web" #>
<#@ assembly name="$(TargetDir)Edo.Data.Entity.dll" #>
<#@ assembly name="$(TargetDir)Edo.ViewModel.dll" #>
<#@ assembly name="$(TargetDir)Newtonsoft.Json.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Edo.Data.Entity.ComponentModel" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.ComponentModel.DataAnnotations.Schema" #>
<#@ assembly name="System.ComponentModel.DataAnnotations.dll" #>
<#@ import namespace="Edo.Data.Entity.ComponentModel" #>
<#@ import namespace="Edo.Data.Entity" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@import namespace="System.Reflection"#>
<#@import namespace="Newtonsoft.Json"#>
<#@import namespace="Edo.ViewModels"#>
<#@ include file="T4Toolbox.tt" #>
<#


    var types = Assembly.GetAssembly(typeof(EntityBase)).GetTypes();
    var baseType = typeof(EntityBase);
    foreach(var type in types){
        var attribute = type.GetCustomAttribute<NgTemplateAttribute>();
        if (type.BaseType != null && type.BaseType == baseType && attribute !=null){
            Template template = new NgTemplate(type);
            template.Output.Encoding = Encoding.UTF8;
            template.RenderToFile( string.Format("{0}.html",type.Name));
            
            foreach( PropertyInfo prop in type.GetProperties())
            {
                var isGrid=prop.PropertyType.GenericTypeArguments.Length!=0 && prop.PropertyType.GenericTypeArguments[0].BaseType==typeof(EntityBase);
                if(!isGrid)
                {       
                    continue;
                }         
                Type t=prop.PropertyType.GenericTypeArguments[0];   
                if(Methods.CheckMoreToMore(t,type))
                {                
                    Template templates = new NgTemplateForMoretoMore(t,type.Name,prop.Name); 
                    templates.Output.Encoding = Encoding.UTF8;
                    templates.RenderToFile( string.Format("Grid_{0}.html",prop.Name));
                }         
            }       
        }       
    }
    
#>

<#+
    public class NgTemplate : CSharpTemplate
    {
        private Type _type;          
        public NgTemplate(Type type)
        {
            _type=type;
        }
        public override string TransformText()
        {
#>
<!--由模板生成，如修改代码，重新生成后将被覆盖！-->
<div>
    <div class="modal-header">
        <h3 class="modal-title" id="modal-title">
            <b>{{item.Id?"EDIT":"CREATE"}}</b>

            <i class="fa fa-close pull-right" ng-click="cancel()"></i>
        </h3>
    </div>
    <div class="modal-body" id="modal-body">
        <div class="modal-nav">
<#+
            int i =0;
          
            Dictionary<string,List<PropertyInfo>> props=Methods.GetNavPropertyInfo(_type);
            foreach(var nav in props.Keys)
            {
#>
  <a ng-click="scrollTo('#tolink<#=                i #>')"><#=                nav #></a>
<#+
                i++;
            }
#>
        </div>
        <form class="form-horizontal  modal-form" role="form" ng-style="{maxHeight:modalHeight}" name="form"
              ng-scrollbars
              ng-scrollbars-update="scrolls.updateScrollbar"
              ng-scrollbars-config="scrolls.config">
<#+
            int ii =0;
            foreach(var nav in props.Keys)
            {
                List<PropertyInfo>ps = new List<PropertyInfo>();
                props.TryGetValue(nav,out ps);
                if(ps.Count==0) continue;
#>
          <fieldset id="tolink<#=                ii #>">
                <legend><i class="fa fa-circle"></i><#=                nav#></legend>       
<#+
                foreach( PropertyInfo prop in ps)
                {
                    var gridAttr=  prop.GetCustomAttribute<GridAttribute>() ?? new GridAttribute();   
                    var isGrid=prop.PropertyType.GenericTypeArguments.Length!=0 && prop.PropertyType.GenericTypeArguments[0].BaseType==typeof(EntityBase);
                    if(isGrid){                
                        Type t=prop.PropertyType.GenericTypeArguments[0];
                        bool moreToMore =Methods.CheckMoreToMore(t,_type);
                        string shortName=t.Name;
                        string keys="Id";
                        var template=moreToMore? string.Format("grid_{0}.html",shortName):string.Format("/ngTemplate/{0}.html",shortName);
                        string foreignKey=Methods.GetGridForeignKey(t,_type);
                        string gridUrl=moreToMore?string.Format("/{0}/Page{1}",_type.Name.Replace("ViewModel",""),shortName):string.Format("/{0}/Page",shortName);
                        string selectUrl=moreToMore?string.Format("/{0}/Select2{1}",_type.Name.Replace("ViewModel",""),shortName):string.Format("/{0}/Select2",shortName);
#>
                  
                    <div grid
                    ng-model="item.<#=                        prop.Name #>"
                     grid-option="gridOption"
                     grid-detail="true"
                     grid-item-field="<#=                        moreToMore?keys:foreignKey#>"
                     grid-enable-edit="<#=                        gridAttr.RowEdit.ToString().ToLower()  #>"
                     grid-enable-delete="<#=                        gridAttr.RowDelete.ToString().ToLower()  #>"
                     grid-more-to-more="<#=                        moreToMore.ToString().ToLower() #>"
                     grid-template="nggrid"
                     grid-name="<#=                        shortName.Substring(0, 1).ToLower() + shortName.TrimStart(shortName.Substring(0, 1).ToCharArray())#>"
                     grid-select-url="<#=                        selectUrl#>"
                     grid-edit-template-url="/ngTemplate/<#=                        shortName #>.html"
                     grid-url="<#=                        gridUrl#>">
                    </div>
<#+                        continue;
                    }
                    var dispalyNameAttribute = prop.GetCustomAttribute<DisplayNameAttribute>();
                    string name=dispalyNameAttribute!=null?dispalyNameAttribute.DisplayName:prop.Name;
                    var foreignKeyAttribute=prop.GetCustomAttribute<ForeignKeyAttribute>();
                    bool isSelect =prop.PropertyType.BaseType==typeof(EntityBase);
#>
                    <div class="form-group " ng-class="{'has-error':form.<#=                    prop.Name #>.$invalid }" 
<#+
                    if(isSelect)
                    {
 #>
                      ng-if="'<#=                        foreignKeyAttribute.Name#>'!=fkName"
<#+
                    }
 #>
                    ><label class="col-sm-2 control-label"><#=                    name #></label>
                    <div class="col-sm-10">
<#+                             
                    var requiredAttribute = prop.GetCustomAttribute<RequiredAttribute>();
                    var maxLengthAttribute = prop.GetCustomAttribute<MaxLengthAttribute>();
                    var minLengthAttribute = prop.GetCustomAttribute<MinLengthAttribute>();
                    var regularExpressionAttribute=prop.GetCustomAttribute<RegularExpressionAttribute>();  
                    if(regularExpressionAttribute==null){
                        if(typeof(int?)==prop.PropertyType.GetTypeInfo() || typeof(int)==prop.PropertyType.GetTypeInfo()){
                            regularExpressionAttribute=  new RegularExpressionAttribute(@"/^([1-9][0-9]*){1,3}$/");//正整数
                            regularExpressionAttribute.ErrorMessage="请输入大于零的整数";
                        }
                        if(typeof(decimal?)==prop.PropertyType.GetTypeInfo()
                            ||typeof(decimal)==prop.PropertyType.GetTypeInfo()
                            ||typeof(float?)==prop.PropertyType.GetTypeInfo()
                            ||typeof(float)==prop.PropertyType.GetTypeInfo()
                            ||typeof(double?)==prop.PropertyType.GetTypeInfo()
                            ||typeof(double)==prop.PropertyType.GetTypeInfo()
                            ||typeof(short?)==prop.PropertyType.GetTypeInfo()
                            ||typeof(short)==prop.PropertyType.GetTypeInfo())
                        {
                            regularExpressionAttribute=  new RegularExpressionAttribute(@"/^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$/"); //正数
                            regularExpressionAttribute.ErrorMessage="请输入大于零的数";
                        }
                    }
                    bool isDate=typeof(DateTime)==prop.PropertyType.GetTypeInfo() || typeof(DateTime?)==prop.PropertyType.GetTypeInfo();  
                    if(isSelect){
                        var selectAttribute = prop.GetCustomAttribute<SelectAttribute>() ?? new SelectAttribute();
                      
                        if(foreignKeyAttribute==null)
                        {
                            throw new Exception(string.Format("实体{0}的属性{1}没有添加ForeignKey的属性!",_type.Name,prop.Name));    
                        }
#>
                     <input type="hidden" name="<#=                        foreignKeyAttribute.Name#>" ng-model="item.<#=                        foreignKeyAttribute.Name#>" required />
                     <ui-select 
                               ng-model="item.<#=                        foreignKeyAttribute.Name#>"
                               theme="bootstrap"                               
                               ng-class="{'has-error':form.<#=                        foreignKeyAttribute.Name #>.$invalid }"
                              reset-search-input="false"
                             on-select="item.<#=                        foreignKeyAttribute.Name#>=$item.code;">                                  
                            <ui-select-match placeholder="键入过滤关键字...">{{select(item.<#=                        foreignKeyAttribute.Name#>,<#=                        prop.PropertyType.Name #>)}}</ui-select-match>
                            <ui-select-choices repeat="obj in <#=                        prop.PropertyType.Name #> track by $index"
                             refresh="getSelect2('<#=                        prop.PropertyType.Name #>','<#=                        selectAttribute.NameField??"Id" #>','Id',$select.search)"
                             refresh-delay="0">
                            <div ng-bind-html="obj.name | highlight: $select.search"></div>
                            </ui-select-choices>
                        </ui-select>
<#+                    }
                    else if (isDate){
#>
                  <div class="dropdown">
                        <a class="dropdown-toggle" id="<#=                        prop.Name #>" role="button" data-toggle="dropdown" data-target="#" href="#">
                        <div class="input-group">
                           <input type="text"
                                 name="<#=                        prop.Name #>" 
                                 readonly="readonly"
                                 class="form-control"
                                 ng-value="item.<#=                        prop.Name #>  | date:'yyyy-MM-dd HH:mm a'">
                               <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                        </div>
                        </a>
                        <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                            <datetimepicker ng-model="item.<#=                        prop.Name #>" data-datetimepicker-config="{ dropdownSelector: '#<#=                        prop.Name #>' }"></datetimepicker>
                        </ul>
               </div>
<#+ 
                    }  
                    else{                          
#>
                        <input type="text" autocomplete="off"  class="form-control pull-left"  placeholder="<#=                        name #>" name="<#=                        prop.Name #>" ng-model="item.<#=                        prop.Name #>"   
                       <#+   
                        StringBuilder attrs= new StringBuilder();  
                        if(requiredAttribute!=null)  
                            attrs.Append(" ng-required=\"true\" ");
                        if(maxLengthAttribute!=null) 
                            attrs.Append(string.Format(" ng-maxlength=\"{0}\"",maxLengthAttribute.Length)); 
                        if(minLengthAttribute!=null)
                            attrs.Append(string.Format(" ng-minlength=\"{0}\"",minLengthAttribute.Length));             
                        if(regularExpressionAttribute!=null)
                            attrs.Append(string.Format(" ng-pattern=\"{0}\"",regularExpressionAttribute.Pattern));
                        WriteLine(attrs.ToString()+">");            
                    }
    
                    if(requiredAttribute!=null || maxLengthAttribute!=null || minLengthAttribute!=null || regularExpressionAttribute!=null || isSelect){
#>                    <div ng-messages="form.<#=                        isSelect?foreignKeyAttribute.Name:prop.Name  #>.$error" class="pull-left error">                       
<#+                        StringBuilder errors= new StringBuilder();                                       
                        if(requiredAttribute!=null  || isSelect) errors.Append("<div ng-message=\"required\">这是个必填项</div>");  
                        if(maxLengthAttribute!=null) errors.Append(string.Format("<div ng-message=\"maxlength\">输入不能超过{0}个字符</div>",maxLengthAttribute.Length)); 
                        if(minLengthAttribute!=null) errors.Append(string.Format("<div ng-message=\"minlength\">输入不能小于{0}个字符</div>",minLengthAttribute.Length));   
                        if(regularExpressionAttribute!=null)  errors.Append(string.Format("<div ng-message=\"pattern\">{0}</div>",regularExpressionAttribute.ErrorMessage??"输入的数据格式不匹配"));#>
                            <#=                        errors.ToString() #>                         
                          </div>
 <#+                    }#>
                    </div>
                </div>
<#+                }    #>
                </fieldset>
<#+                ii++; }#>
        </form>
    </div>
    <div class="modal-footer">
        <button class="btn btn-primary " type="button" ng-click="ok(form,'/<#=            _type.Name.ToLower()#>/')">确 定</button>
        <button class="btn btn-warning " type="button" ng-click="cancel()">取 消</button>
    </div>
</div>
<#+
            return this.GenerationEnvironment.ToString();
        }    
    }
#>

<#+
    public class NgTemplateForMoretoMore : CSharpTemplate
    {
        private Type t; 
        private string api;   
        private string prop;
        public NgTemplateForMoretoMore(Type type,string apiName,string propName)
        {
            t=type;
            api=apiName;
            prop=propName;
        }
        public override string TransformText()
        {                            
#>
               <div>
                    <div class="modal-header">
                         <h3 class="modal-title" id="modal-title-dt">
                              <b>CHOOSE</b>
                              <i class="fa fa-close pull-right" ng-click="cancel()"></i>
                        </h3>
                    </div>
                    <div class="modal-body grid-template" id="modal-body-dt" >
                         <div grid
                            grid-detail="true"
                            grid-option="gridOption"
                            grid-more-to-more="true"
                            grid-template="nggrid"
                            grid-name="<#=            t.Name.Substring(0, 1).ToLower() + t.Name.TrimStart(t.Name.Substring(0, 1).ToCharArray())#>"
                            grid-select-url="/<#=            t.Name #>/select2"
                            grid-edit-template-url="/ngTemplate/<#=            t.Name #>.html"
                            grid-url="/<#=            t.Name #>/Page">
                     </div>
                   </div>
                   <div class="modal-footer">
                      <button class="btn btn-primary " type="button" ng-click="choose('/<#=            api.ToLower()#>/edit','<#=prop #>')">确 定</button>
                      <button class="btn btn-warning " type="button" ng-click="cancel()">取 消</button>
                   </div>
             </div>
<#+                         
            return this.GenerationEnvironment.ToString();
        }
    }
    public static class Methods {
        public static bool CheckMoreToMore(Type t,Type ct){
            bool check=false;
            foreach(PropertyInfo prop in  t.GetProperties()){
                if(prop.PropertyType.GenericTypeArguments.Length==0) continue;
                foreach(Type type in prop.PropertyType.GenericTypeArguments){
                    if(ct==type) {
                        check=true;
                        break;
                    }
                }
            }
            return check;
        }
        public static string GetKeyString(Type type){
           
            foreach(PropertyInfo prop in  type.GetProperties()){
                var attr = prop.GetCustomAttribute<KeyAttribute>();
                if(attr!=null) 
                    return prop.Name;
            }
            throw new Exception(string.Format("没有为类型{0}定义KEY!",type.Name));
        }
        public static string GetGridForeignKey(Type type,Type ct)
        {
            foreach(PropertyInfo prop in  type.GetProperties()){
                if(prop.PropertyType==ct)
                {
                    var p=prop.GetCustomAttribute<ForeignKeyAttribute>();
                    if(p!=null)
                        return p.Name;    
                    throw new Exception(string.Format("实体{0}的属性{1}没有添加ForeignKey的属性!",type.Name,prop.Name));    
                }
                    
            }
            return null;
        }
        public static Dictionary<string,List<PropertyInfo>> GetNavPropertyInfo(Type _type){
            Dictionary<string,List<PropertyInfo>> result= new Dictionary<string,List<PropertyInfo>> {
                    {"基本信息", new List<PropertyInfo>()}
                    };
            foreach(PropertyInfo prop in  _type.GetProperties()){
                if(new []{"Id","IsDeleted","Timestamp","CreatedDate"}.Contains(prop.Name) || prop.PropertyType==typeof(Guid) ) continue;
                if(prop.GetCustomAttribute<NotMappedAttribute>()!=null) continue;
                var p=prop.GetCustomAttribute<NavTagAttribute>();
                string tag="基本信息";
                if(p!=null) {
                    tag=p.Tag;
                }
                else if (prop.PropertyType.GenericTypeArguments.Length!=0 && prop.PropertyType.GenericTypeArguments[0].BaseType==typeof(EntityBase)){
                    tag=prop.Name;
                }
                if(result.ContainsKey(tag)){
                    result.FirstOrDefault(q=>q.Key==tag).Value.Add(prop);
                }
                else{
                    result.Add(tag,new List<PropertyInfo>{prop});
                    };
            }
            return result;
        } 
    }
#>
