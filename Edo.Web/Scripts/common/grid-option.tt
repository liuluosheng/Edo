<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web" #>
<#@ assembly name="$(TargetDir)Serenity.Core.dll" #>
<#@ assembly name="$(TargetDir)Edo.Data.Entity.dll" #>
<#@ assembly name="$(TargetDir)Edo.ViewModel.dll" #>
<#@ assembly name="$(TargetDir)Newtonsoft.Json.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Edo.Data.Entity.ComponentModel" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="Edo.Data.Entity" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@import namespace="System.Reflection"#>
<#@import namespace="Newtonsoft.Json"#>
<#@import namespace="Edo.ViewModels"#>
<#@ output extension=".js" #>
  window.gridOptions=<#=        GetScript() #>


<#+
    public string GetScript(){
        var types = Assembly.GetAssembly(typeof(EntityBase)).GetTypes();
        var baseType = typeof(EntityBase);
        Dictionary<string,Dictionary<string, List<object>>> obj = new Dictionary<string,Dictionary<string, List<object>>>();
      
        foreach (var type in types)
        {
            if( type.GetCustomAttribute<NgTemplateAttribute>()==null){continue;}
            Dictionary<string, List<object>> results = new Dictionary<string, List<object>>();
            var options = new List<object>();
            List<object> btns =new  List<object>();
            if (type.BaseType != null && type.BaseType == baseType)
            {
                foreach (var propertyInfo in type.GetProperties())
                {
                    var data = propertyInfo.GetCustomAttribute<GridColumnAttribute>();
                    var displayName = propertyInfo.GetCustomAttribute<DisplayNameAttribute>();
                    if (data != null && !data.Hide)
                    {
                        data.Field = data.Field ?? propertyInfo.Name;
                        if (propertyInfo.PropertyType == typeof(DateTime) || propertyInfo.PropertyType == typeof(DateTime?))
                        {
                            data.Type = Edo.Data.Entity.Enum.ColumnType.Date;
                        }
                        if (propertyInfo.PropertyType == typeof(Boolean) || propertyInfo.PropertyType == typeof(Boolean?))
                        {
                            data.Type = Edo.Data.Entity.Enum.ColumnType.Bool;
                        }
                        if (string.IsNullOrEmpty(data.Name))
                        { 
                            data.Name = displayName != null ? displayName.DisplayName : propertyInfo.Name;
                        }
                        data.Id = propertyInfo.Name;
                        options.Add(data);
                    }
                    if (propertyInfo.PropertyType.GenericTypeArguments.Length!=0 && propertyInfo.PropertyType.GenericTypeArguments[0].BaseType==typeof(EntityBase))
                    {                
                        string name =propertyInfo.Name;
                        var mtm=CheckMoreToMore(propertyInfo.PropertyType.GenericTypeArguments[0],type);
                        if(displayName!=null)
                        {
                            name=displayName.DisplayName;
                        }
                        btns.Add(new{name,type=propertyInfo.Name, template=mtm?"Grid_"+propertyInfo.Name:propertyInfo.Name});                   
                    }
                }
                results.Add("columns", options);
                results.Add("btns",btns);
            }
            obj.Add(type.Name,results);
        }
        JsonSerializerSettings settings = new JsonSerializerSettings
            {
                ContractResolver = new Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver(),
                NullValueHandling = NullValueHandling.Ignore,
                DefaultValueHandling = DefaultValueHandling.Ignore
                };
        settings.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter());
        return Newtonsoft.Json.JsonConvert.SerializeObject(  obj , settings);
    }
    public static bool CheckMoreToMore(Type t,Type ct){
        bool check=false;
        foreach(PropertyInfo prop in  t.GetProperties()){
            if(prop.PropertyType.GenericTypeArguments.Length==0) continue;
            foreach(Type type in prop.PropertyType.GenericTypeArguments){
                if(ct==type) {
                    check=true;
                    break;
                }
            } 
        }
        return  check; 
    }
 #>






