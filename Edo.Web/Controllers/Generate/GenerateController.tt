<#@ template language="C#" debug="True" #>
<#@ output extension="log" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web" #>
<#@ assembly name="$(TargetDir)Edo.Data.Entity.dll" #>
<#@ assembly name="$(TargetDir)Edo.ViewModel.dll" #>
<#@ assembly name="$(TargetDir)Newtonsoft.Json.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Edo.Data.Entity.ComponentModel" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="Edo.Data.Entity" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@import namespace="System.Reflection"#>
<#@import namespace="Newtonsoft.Json"#>
<#@import namespace="Edo.ViewModels"#>
<#@ assembly name="System.IO" #>
<#@ import namespace="System.IO" #>
<#@ include file="T4Toolbox.tt" #>
<#
    var types = Assembly.GetAssembly(typeof(EntityBase)).GetTypes();
    var baseType = typeof(EntityBase);
    foreach(var type in types){
        var attribute = type.GetCustomAttribute<GenerateControllerAttribute>();
        if (type.BaseType != null && type.BaseType == baseType && attribute !=null){
            string path=Host.ResolvePath(string.Format("{0}\\{1}Controller.cs",Path.GetDirectoryName(Host.TemplateFile),type.Name));
            Template template = new ControllerTemplate(type,path);
            template.Output.Encoding = Encoding.UTF8;
            string file=string.Format("{0}Controller.cs",type.Name);
            template.RenderToFile(file);
            WriteLine(string.Format("Generate file:{0}.",file));
        }       
    }
#>

<#+
    public class ControllerTemplate : CSharpTemplate
    {
        private Type _type;
        private string _path;
        List<PropertyInfo> genericProperties=new List<PropertyInfo>();
        private string name;
        public ControllerTemplate(Type t,string path){
            _type=t;
            name=_type.Name;
            _path=path;
        }
        public override string TransformText()
        {
            //if(System.IO.File.Exists(_path))
            //{
            //FileStream fs = new FileStream(_path, FileMode.Open, FileAccess.Read, FileShare.Read);
            //StreamReader sr = new StreamReader(fs, Encoding.UTF8);
            //return sr.ReadToEnd();
            //}
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Web;
using System.Web.Mvc;
using Edo.Data.Entity;
using Edo.Data.Entity.ComponentModel;
using Edo.ViewModels;
using System.Linq.Dynamic.Core;
using Edo.Service;
using System.Threading.Tasks;
using Edo.Web.Model;
namespace Edo.Web.Controllers
{
	public partial class <#=            name #>Controller : BaseController<<#=            name #>, <#=            name #>ViewModel>
	{
        public <#=            name #>Controller(BaseService<<#=            name #>> service)
        :base(service)
        {
       
        }
        public ActionResult Index()
        {
            return View();
        }
       <#+
            foreach(PropertyInfo prop in _type.GetProperties()){
                if(!prop.PropertyType.IsGenericType)continue;
                Type t=prop.PropertyType.GenericTypeArguments[0];
                if(CheckMoreToMore(t)){
                    string tName=t.Name;
                    genericProperties.Add(prop);
       #>    
      #region <#=                    prop.Name #>    
        public async Task<ActionResult> Page<#=                    tName #>(string itemFilter, int pageIndex, int pageSize, string sort, string filter)
        {
           var obj = _dbset.Where(itemFilter).SelectMany(p => p.<#=                    prop.Name #>);
            return await PageData<<#=                    t.Name #>, <#=                    t.Name #>ViewModel>(obj, sort, filter, pageIndex, pageSize);    
        }
        public async Task<ActionResult> Select2<#=                    tName #>(string itemFilter, string field, string q)
        {
            var obj = _dbset.Where(itemFilter).SelectMany(p => p.<#=                    prop.Name #>);
            return await SelectData(obj, field, q);       
        }  
        public async Task<ActionResult> Delete<#=                    tName #>(Guid id,Guid itemId)
        {
            var model = _service.Repository.GetByKey(id);
            model.<#=                    prop.Name #>.Remove(_service.Repository.OtherEntities<<#=                    t.Name #>>().FirstOrDefault(p => p.Id == itemId));
            return Content(GetJsonString(new Result { Success = await _service.Repository.UpdateAsync(model) > 0 ,Obj=AutoMapper.Mapper.Map<<#=                    name #>,<#=                    name #>ViewModel>(model) }));
        }  
        public async Task<ActionResult> Create<#=                    tName #>(Guid id,Guid itemId)
        {
            var model = _service.Repository.GetByKey(id);
            model.<#=                    prop.Name #>.Add(_service.Repository.OtherEntities<<#=                    t.Name #>>().FirstOrDefault(p => p.Id == itemId));
            return Content(GetJsonString(new Result { Success = await _service.Repository.UpdateAsync(model) > 0 ,Obj=AutoMapper.Mapper.Map<<#=                    name #>,<#=                    name #>ViewModel>(model)}));
        }  
     #endregion  
     <#+                }
            }          
#>}
}
<#+
            return this.GenerationEnvironment.ToString();
        }
        public bool CheckMoreToMore(Type t){
            bool check=false;
            foreach(PropertyInfo prop in  t.GetProperties()){
                if(prop.PropertyType.GenericTypeArguments.Length==0) continue;
                foreach(Type type in prop.PropertyType.GenericTypeArguments){
                    if(_type==type) {
                        check=true;               
                        break;
                    }
                }
            }
            return check;
        }
    }

#>
