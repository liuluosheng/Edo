<#@ template language="C#" debug="True" #>
<#@ output extension="log" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web" #>
<#@ assembly name="$(TargetDir)Edo.Data.Entity.dll" #>
<#@ assembly name="$(TargetDir)Edo.ViewModel.dll" #>
<#@ assembly name="$(TargetDir)Newtonsoft.Json.dll" #>
<#@ assembly name="System.ComponentModel.DataAnnotations.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Edo.Data.Entity.ComponentModel" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.ComponentModel.DataAnnotations.Schema" #>
<#@ import namespace="Edo.Data.Entity" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@import namespace="System.Reflection"#>
<#@import namespace="Newtonsoft.Json"#>
<#@import namespace="Edo.ViewModels"#>
<#@ assembly name="System.IO" #>
<#@ import namespace="System.IO" #>
<#@ include file="T4Toolbox.tt" #>
<#    //  不重新生成已存在的文件，需要重新生成文件，先将其删除。
    var types = Assembly.GetAssembly(typeof(EntityBase)).GetTypes();
    var baseType = typeof(EntityBase);
    foreach(var type in types){
        if (type.BaseType != null && type.BaseType == baseType){
            string path=Host.ResolvePath(string.Format("{0}\\{1}ViewModel.cs",Path.GetDirectoryName(Host.TemplateFile),type.Name));
            Template template = new ControllerTemplate(type,path);
            template.Output.Encoding = Encoding.UTF8;
            string file=string.Format("{0}ViewModel.cs",type.Name);
            template.RenderToFile(file);
            WriteLine(string.Format("Generate file:{0}.",file));
        }       
    }
   

#>
<#+
    public class ControllerTemplate : CSharpTemplate
    {
        private Type _type;
        private string name;
        private string _path;
        public ControllerTemplate(Type t,string path){
            _type=t;
            _path=path;
            name=_type.Name.Replace("ViewModel","");
        }
        public override string TransformText()
        {
            //if(System.IO.File.Exists(_path))
            //{
            //FileStream fs = new FileStream(_path, FileMode.Open, FileAccess.Read, FileShare.Read);
            //StreamReader sr = new StreamReader(fs, Encoding.UTF8);
            //return sr.ReadToEnd();
            //}
#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using Edo.Data.Entity.ComponentModel;
using Newtonsoft.Json;
using Edo.Data.Entity;
using AutoMapper;
using Edo.Data.Entity.Enum;
namespace Edo.ViewModels
{
    public partial class <#=            _type.Name #>ViewModel : EntityBaseViewModel
    {     
        <#+            
            foreach(PropertyInfo prop in _type.GetProperties()){
                var p=prop.GetCustomAttribute<ForeignKeyAttribute>();
                var genericTypes=prop.PropertyType.GenericTypeArguments;
                if( new []{"Id","IsDeleted","CreatedDate"}.Contains(prop.Name) ) continue;
                if(p!=null || genericTypes.Length!=0 && genericTypes[0].BaseType==typeof(EntityBase)){ 
        #>  
                [IgnoreMap]<#+                }     #>          
                [DisplayName("<#=                prop.Name #>")]
                public virtual <#=                genericTypes.Length==0  ?prop.PropertyType.Name:(genericTypes[0].BaseType!=typeof(EntityBase)?string.Format("{0}?",genericTypes[0].Name):string.Format(" ICollection<{0}ViewModel>",genericTypes[0].Name)) #> <#=                prop.Name #> { get; set; }
<#+            }#>   }
}
 <#+    
            return this.GenerationEnvironment.ToString();
        }
        public IEnumerable<string> GetForeignKeyProp(){
            foreach(PropertyInfo prop in  _type.GetProperties()){
                var p=prop.GetCustomAttribute<ForeignKeyAttribute>();
                if(p!=null){
                    yield return p.Name;
                }
            }
        }
        public PropertyInfo GetPropByForeignKey(string key){
            foreach(PropertyInfo prop in  _type.GetProperties()){
                var p=prop.GetCustomAttribute<ForeignKeyAttribute>();
                if(p!=null && p.Name==key) return prop;
            }
            return null;
        }
    }
#>
